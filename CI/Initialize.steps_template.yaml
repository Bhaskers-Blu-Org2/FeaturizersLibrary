parameters:
    operting_system: "" # Windows|Linux|MacOS
    configuration: ""
    enable_code_coverage: "" # True|False

steps:
    - task: DownloadPipelineArtifact@2
      displayName: "[IMPL] Download Global Build Information"
      inputs:
          artifactName: "Prerequisites"
          targetPath: "$(Pipeline.Workspace)/Prerequisites"
      timeoutInMinutes: 180

    - task: PythonScript@0
      displayName: "[IMPL] Populate Stage Variables"
      inputs:
          scriptSource: inline
          script: |-
              import os
              import json
              from collections import OrderedDict

              values = OrderedDict()

              # Create standard values
              operating_system = "${{ parameters.operating_system }}"

              if operating_system == "Windows":
                  values["azure_activate_script"] = "call Activate.cmd"
                  values["azure_script_extension"] = ".cmd"
                  values["azure_display_all_environment_vars"] = "set"
                  values["azure_bootstrap_command"] = "bootstrap.cmd"
                  values["azure_single_threaded_build_arg"] = ""
              elif operating_system in ["Linux", "MacOS"]:
                  values["azure_activate_script"] = "source ./Activate.sh"
                  values["azure_script_extension"] = ".sh"
                  values["azure_display_all_environment_vars"] = "export"
                  values["azure_bootstrap_command"] = "sudo ./bootstrap.sh"

                  # The MacOS compiler hangs when invoking the compiler in parallel. As a result, force single threaded
                  # execution.
                  if operating_system == "MacOS":
                      values["azure_single_threaded_build_arg"] = "/single_threaded"
                  else:
                      values["azure_single_threaded_build_arg"] = ""

              values["azure_agent_temp_directory"] = os.getenv("AGENT_TEMPDIRECTORY")
              values["azure_artifacts_directory"] = os.getenv("BUILD_ARTIFACTSTAGINGDIRECTORY")

              if "${{ parameters.enable_code_coverage }}".lower() in ["true", "yes"]:
                  values["azure_code_coverage_arg"] = "/code_coverage"
              else:
                  values["azure_code_coverage_arg"] = ""

              # Load global values previously generated
              json_filename = os.path.join(r"$(Pipeline.Workspace)", "Prerequisites", "global_build_information.json")
              assert os.path.isfile(json_filename), json_filename

              with open(json_filename) as f:
                  content = json.load(f)

              for k, v in content.items():
                  k = "azure_{}".format(k)

                  if isinstance(v, bool):
                      v = 1 if v else 0
                  elif v is None:
                      v = ""

                  values[k] = v

              for k, v in values.items():
                  print("{} = {}".format(k, v))
                  print("##vso[task.setvariable variable={}]{}".format(k, v))

      timeoutInMinutes: 180
