parameters:
  agent_pool: ""
  release_build: False
  prerelease_build_name: ""

stages:
  # This is a bit wonky, but we need to create values that can be used from stage-to-stage to ensure
  # that builds that include datetime information in their product version numbers use a value that is
  # consistent regardless of when the build was invoked within a particual stage. Create the value here,
  # and then use that value when invoking the build in `BuildAndTest.stage_template.yaml`.
  - stage: Prerequisites_Stage
    displayName: "Persist Global Build Information"

    jobs:
      - job: Prerequistes_Job
        timeoutInMinutes: 240

        displayName: "Persist"
        pool:
          vmImage: ${{ parameters.agent_pool }}

        steps:
          - checkout: none

          - script: |-
              echo "agent_pool - ${{ parameters.agent_pool }}"
              echo "release_build - ${{ parameters.release_build }}"
              echo "prerelease_build_name - ${{ parameters.prerelease_build_name }}"
            displayName: "[DEBUG] Display BuildAndTest Variables"

          - task: PythonScript@0
            displayName: "[IMPL] Create Global Build Information"
            inputs:
              scriptSource: inline
              script: |-
                from datetime import datetime
                import json
                import os
                import sys

                values = {}

                release_build = sys.argv[1].lower() in ["true", "yes"]
                values["is_release_build"] = release_build

                # the intention here is to compare if var == '$(var)', but as the right side of == will be a string of
                # "$(var)" if var is empty, or the exact value which is equal to var if var is assigned the value.
                # Therefore, a non-standard comparison is necessary in this case
                if len(sys.argv) > 2 and sys.argv[2] != "{}(prerelease_build_name)".format("$"):
                    build_name = sys.argv[2]
                    is_prerelease_build = True
                else:
                    is_prerelease_build = False

                    if not release_build:
                        now = datetime.now()

                        # The build should compare as:
                        #   "manual" < "pipeline" < "preview"
                        build_name = "pipeline.{year}.{month}.{day}.{hour}.{minute}.{second}".format(
                             year=now.year,
                             month=now.month,
                             day=now.day,
                             hour=now.hour,
                             minute=now.minute,
                             second=now.second,
                        )
                    else:
                        build_name = None

                values["is_prerelease_build"] = is_prerelease_build
                values["build_name"] = build_name

                for k, v in values.items():
                    print("{} = {}".format(k, v))

                with open(os.path.join(r"$(Pipeline.Workspace)", "global_build_information.json"), "w") as f:
                    json.dump(values, f)
              arguments: "${{ parameters.release_build }} ${{ parameters.prerelease_build_name }}"
            timeoutInMinutes: 180

          - task: PublishPipelineArtifact@0
            displayName: "Publish Artifacts"
            inputs:
              targetPath: "$(Pipeline.Workspace)/global_build_information.json"
              artifactName: "Prerequisites"
            timeoutInMinutes: 180
