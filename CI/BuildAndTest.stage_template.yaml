parameters:
  operating_system: "" # Windows|Linux|MacOS
  enable_code_coverage: "" # True|False
  esrp_connected_service_name: "None" # <Name>|None
  dependencies: []

  configuration: ""
  agent_pool: ""
  agent_pool_container: ""

  # These are parameters not because they will be configued by the caller, but rather because arrays can be
  # defined here and not in variables.
  test_types:
    "UnitTests": " $(azure_code_coverage_arg)"
    "FunctionalTests": ""
    "IntegrationTests": ""
    "SystemTests": ""
    "LocalEndToEndTests": ""
    # 'EndToEndTests': ''
    # 'BuildVerificationTests': ''
    # 'PerformanceTests: ''

stages:
  - stage: BuildAndTest_${{ parameters.operating_system }}_${{ parameters.configuration }}_Stage
    displayName: "${{ parameters.operating_system }} - ${{ parameters.configuration }}: "
    dependsOn: ${{ parameters.dependencies }}

    jobs:
      - template: BuildAndTest.job_template.yaml
        parameters:
          operating_system: ${{ parameters.operating_system }}
          configuration: ${{ parameters.configuration }}

          agent_pool: ${{ parameters.agent_pool }}
          agent_pool_container: ${{ parameters.agent_pool_container }}

          steps:
            - template: Initialize.steps_template.yaml
              parameters:
                operating_system: ${{ parameters.operating_system }}
                configuration: ${{ parameters.configuration }}
                enable_code_coverage: ${{ parameters.enable_code_coverage }}

            - script: |-
                echo "esrp_connected_service_name - ${{ parameters.esrp_connected_service_name }}"
                echo "dependencies - ${{ join(', ', parameters.dependencies) }}"
                echo "configuration - ${{ parameters.configuration }}"
                echo "agent_pool - ${{ parameters.agent_pool }}"
                echo "agent_pool_container - ${{ parameters.agent_pool_container }}"
              displayName: "[DEBUG] Display BuildAndTest Variables"

            - script: |-
                $(azure_display_all_environment_vars)
              displayName: "[DEBUG] Environment Variables (Before Activation)"

            - script: |-
                $(azure_bootstrap_command) $(azure_agent_temp_directory) "/configuration=${{ parameters.configuration }}" /use_ascii /verbose
              displayName: "<Bootstrap>"
              timeoutInMinutes: 180

            - script: |-
                $(azure_activate_script) ${{ parameters.configuration }} && $(azure_display_all_environment_vars)
              displayName: "[DEBUG] Environment Variables (After Activation)"

            # TODO: Code formatting

            # Dynamically create the builder args
            - task: PythonScript@0
              displayName: "[IMPL] Create Builder Args"
              inputs:
                scriptSource: inline
                script: |-
                  if "$(azure_is_release_build)" == "1":
                      args = "/release_build"
                  else:
                      args = "/prerelease_build_name=$(azure_build_name)"

                  args = '"/custom_build_args=src/FeaturizerPrep/SharedLibrary:{} /no_build_info"'.format(args)

                  print("azure_builder_args = {}".format(args))
                  print("##vso[task.setvariable variable=azure_builder_args]{}".format(args))
              timeoutInMinutes: 180

            - script: |-
                $(azure_activate_script) ${{ parameters.configuration }} && Builder$(azure_script_extension) Execute . "$(azure_artifacts_directory)/Builder" /verbose $(azure_builder_args)
              displayName: "<Builder>"
              timeoutInMinutes: 180

            - script: |-
                $(azure_activate_script) ${{ parameters.configuration }} && Tester$(azure_script_extension) MatchAllTests . UnitTests /verbose
              displayName: "<Tester (MatchAllTests) - UnitTests>"
              timeoutInMinutes: 180
              condition: succeededOrFailed()

            - ${{ each test_type in parameters.test_types }}:
                - script: |-
                    $(azure_activate_script) ${{ parameters.configuration }} && Tester$(azure_script_extension) TestAll . "$(azure_artifacts_directory)/Tester/${{ test_type.key }}" ${{ test_type.key }} ${{ test_type.value }} /verbose $(azure_single_threaded_build_arg)
                  displayName: "<Tester - ${{ test_type.key }}>"
                  timeoutInMinutes: 180
                  condition: succeededOrFailed()

            # Sign the content
            - ${{ if not(eq(parameters.esrp_connected_service_name, 'None')) }}:
                - task: CopyFiles@2
                  displayName: "Copy Files to Sign"
                  inputs:
                    SourceFolder: "$(azure_artifacts_directory)/Builder"
                    TargetFolder: "$(azure_artifacts_directory)/Builder.original"
                    CleanTargetFolder: true

                - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
                  displayName: "ESRP CodeSign"
                  inputs:
                    ConnectedServiceName: ${{ parameters.esrp_connected_service_name }}
                    FolderPath: "$(azure_artifacts_directory)/Builder"
                    signConfigType: inlineSignParams
                    inlineOperation: |-
                      [
                          {
                              "KeyCode" : "CP-230012",
                              "OperationCode" : "SigntoolSign",
                              "Parameters" : {
                                  "OpusName" : "Microsoft",
                                  "OpusInfo" : "http://www.microsoft.com",
                                  "FileDigest" : "/fd \"SHA256\"",
                                  "PageHash" : "/NPH",
                                  "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
                              },
                              "ToolName" : "sign",
                              "ToolVersion" : "1.0"
                          },
                          {
                              "KeyCode" : "CP-230012",
                              "OperationCode" : "SigntoolVerify",
                              "Parameters" : {},
                              "ToolName" : "sign",
                              "ToolVersion" : "1.0"
                          }
                      ]

            - task: PythonScript@0
              displayName: "[IMPL] Persist Product Version Information"
              inputs:
                scriptSource: inline
                script: |-
                  import json
                  import os

                  from collections import OrderedDict

                  values = OrderedDict()

                  builder_dir = os.path.join(r"$(azure_artifacts_directory)", "Builder")

                  # Get the release directory
                  for potential_dirname in os.listdir(builder_dir):
                      potential_fullpath = os.path.join(builder_dir, potential_dirname)
                      if not os.path.isdir(potential_fullpath):
                          continue

                      file_attributes_filename = os.path.join(potential_fullpath, "Microsoft MLFeaturizers.FileAttributes.json")
                      if not os.path.isfile(file_attributes_filename):
                          raise Exception("'{}' does not exist".format(file_attributes_filename))

                      with open(file_attributes_filename) as f:
                          file_attributes_data = json.load(f)

                      assert "product_version_full" in file_attributes_data, file_attributes_data
                      values["product_version"] = file_attributes_data["product_version_full"]

                      break

                  for k, v in values.items():
                      print("{} = {}".format(k, v))

                  with open(os.path.join(builder_dir, "product_version_information.json"), "w") as f:
                      json.dump(values, f)
              condition: succeededOrFailed()
              timeoutInMinutes: 180

            - task: PublishPipelineArtifact@0
              displayName: "Publish Artifacts"
              inputs:
                targetPath: $(azure_artifacts_directory)
                artifactName: "${{ parameters.operating_system }} - ${{ parameters.configuration }}"
              condition: succeededOrFailed()
              timeoutInMinutes: 180
