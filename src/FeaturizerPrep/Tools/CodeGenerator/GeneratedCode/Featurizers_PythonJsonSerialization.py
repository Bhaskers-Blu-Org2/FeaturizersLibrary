# --------------------------------------------------------------------------------
# |
# |  WARNING:
# |  This file was generated; any local changes will be overwritten during
# |  future invocations of the generator!
# |
# |  Generated by: <SimpleSchemaGenerator>/Plugins/Impl/PythonSerializationImpl.py
# |  Generated on: 2019-10-08 10:57:06.479915
# |
# --------------------------------------------------------------------------------
import copy
import sys

from collections import OrderedDict

import six

import CommonEnvironment
from CommonEnvironment.TypeInfo import Arity
from CommonEnvironment.TypeInfo.AnyOfTypeInfo import AnyOfTypeInfo
from CommonEnvironment.TypeInfo.ClassTypeInfo import ClassTypeInfo
from CommonEnvironment.TypeInfo.DictTypeInfo import DictTypeInfo
from CommonEnvironment.TypeInfo.GenericTypeInfo import GenericTypeInfo
from CommonEnvironment.TypeInfo.ListTypeInfo import ListTypeInfo

from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.PythonCodeVisitor import PythonCodeVisitor
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.StringSerialization import StringSerialization

# <Unused import> pylint: disable = W0611
# <Unused import> pylint: disable = W0614
from CommonEnvironment.TypeInfo.FundamentalTypes.All import *               # <Wildcard import> pylint: disable = W0401

# <Standard import should be placed before...> pylint: disable = C0411

# ----------------------------------------------------------------------
import json

from CommonEnvironment import FileSystem
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.JsonSerialization import JsonSerialization

# ----------------------------------------------------------------------
class JsonEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Object):
            d = copy.deepcopy(o.__dict__)

            for k in list(six.iterkeys(d)):
                if k.startswith("_"):
                    del d[k]

            return d

        return getattr(o, "__dict__", o)


# ----------------------------------------------------------------------
# <Method name "..." doesn't conform to PascalCase naming style> pylint: disable = C0103
# <Line too long> pylint: disable = C0301
# <Too many lines in module> pylint: disable = C0302
# <Wrong hanging indentation> pylint: disable = C0330

# <Too few public methods> pylint: disable = R0903
# <Too many public methods> pylint: disable = R0904
# <Too many branches> pylint: disable = R0912
# <Too many statements> pylint: disable = R0915


# ----------------------------------------------------------------------
class SerializationException(Exception):
    def __init__(self, ex_or_string):
        if isinstance(ex_or_string, six.string_types):
            super(SerializationException, self).__init__(ex_or_string)
        else:
            super(SerializationException, self).__init__(str(ex_or_string))

            self.__dict__ = copy.deepcopy(ex_or_string.__dict__)


class UniqueKeySerializationException(SerializationException):              pass
class SerializeException(SerializationException):                           pass
class DeserializeException(SerializationException):                         pass


class DoesNotExist(object):                                                 pass


# ----------------------------------------------------------------------
# |
# |  Utility Methods
# |
# ----------------------------------------------------------------------
def Deserialize(
    root,
    process_additional_data=False,
    always_include_optional=False,
):
    return Deserialize_featurizers(
        root,
        is_root=False,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,
    )


# ----------------------------------------------------------------------
def Deserialize_featurizers(
    items,
    process_additional_data=False,
    always_include_optional=False,
    is_root=False,
):
    """Deserializes 'featurizers' from a JSON object to a python object"""

    if isinstance(items, six.string_types):
        if FileSystem.IsFilename(items):
            with open(items) as f:
                items = json.load(f)
        else:
            items = json.loads(items)

    if not isinstance(items, list):
        if isinstance(items, dict) and "featurizers" in items:
            items = items["featurizers"]
        elif not isinstance(items, dict) and hasattr(items, "featurizers"):
            items = getattr(items, "featurizers")
        elif is_root:
            items = DoesNotExist

    try:
        try:
            items = Deserializer().featurizers(
                items,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )
        except:
            _DecorateActiveException("featurizers")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return items


# ----------------------------------------------------------------------
# |
# |  Type Infos
# |
# ----------------------------------------------------------------------
featurizers_TypeInfo                                                        = ClassTypeInfo(OrderedDict([ ( "name", StringTypeInfo(min_length=1) ), ( "estimator_name", StringTypeInfo(min_length=1) ), ( "num_output_columns", FloatTypeInfo(min=1.0) ), ( "custom_structs", ClassTypeInfo(OrderedDict([ ( "name", StringTypeInfo(min_length=1) ), ( "members", ClassTypeInfo(OrderedDict([ ( "type", StringTypeInfo(min_length=1) ), ( "name", StringTypeInfo(min_length=1) ) ]), require_exact_match=True, arity=Arity.FromString('+')) ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "configuration_params", ClassTypeInfo(OrderedDict([ ( "type", StringTypeInfo(min_length=1) ), ( "name", StringTypeInfo(min_length=1) ), ( "is_optional", BoolTypeInfo(arity=Arity.FromString('?')) ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "templates", ClassTypeInfo(OrderedDict([ ( "name", StringTypeInfo(min_length=1) ), ( "types", StringTypeInfo(min_length=1, arity=Arity.FromString('+')) ) ]), require_exact_match=True, arity=Arity.FromString('*')) ), ( "is_intput_a_template", BoolTypeInfo(arity=Arity.FromString('?')) ), ( "is_output_a_template", BoolTypeInfo(arity=Arity.FromString('?')) ), ( "transformed_type_mappings", ClassTypeInfo(OrderedDict([ ( "input_type", StringTypeInfo(min_length=1) ), ( "is_input_optional", BoolTypeInfo(arity=Arity.FromString('?')) ), ( "transformed_type", StringTypeInfo(min_length=1) ), ( "is_output_optional", BoolTypeInfo(arity=Arity.FromString('?')) ) ]), require_exact_match=True, arity=Arity.FromString('+')) ) ]), require_exact_match=True, arity=Arity.FromString('+'))

_featurizers_TypeInfo_Contents                                              = OrderedDict([("name", GenericTypeInfo()), ("estimator_name", GenericTypeInfo()), ("num_output_columns", GenericTypeInfo()), ("custom_structs", GenericTypeInfo(arity=Arity.FromString('*'))), ("configuration_params", GenericTypeInfo(arity=Arity.FromString('*'))), ("templates", GenericTypeInfo(arity=Arity.FromString('*'))), ("is_intput_a_template", GenericTypeInfo(arity=Arity.FromString('?'))), ("is_output_a_template", GenericTypeInfo(arity=Arity.FromString('?'))), ("transformed_type_mappings", GenericTypeInfo(arity=Arity.FromString('+')))])
_featurizers_custom_structs_TypeInfo_Contents                               = OrderedDict([("name", GenericTypeInfo()), ("members", GenericTypeInfo(arity=Arity.FromString('+')))])
_featurizers_custom_structs_members_TypeInfo_Contents                       = OrderedDict([("type", GenericTypeInfo()), ("name", GenericTypeInfo())])
_featurizers_configuration_params_TypeInfo_Contents                         = OrderedDict([("type", GenericTypeInfo()), ("name", GenericTypeInfo()), ("is_optional", GenericTypeInfo(arity=Arity.FromString('?')))])
_featurizers_templates_TypeInfo_Contents                                    = OrderedDict([("name", GenericTypeInfo()), ("types", GenericTypeInfo(arity=Arity.FromString('+')))])
_featurizers_transformed_type_mappings_TypeInfo_Contents                    = OrderedDict([("input_type", GenericTypeInfo()), ("is_input_optional", GenericTypeInfo(arity=Arity.FromString('?'))), ("transformed_type", GenericTypeInfo()), ("is_output_optional", GenericTypeInfo(arity=Arity.FromString('?')))])

_featurizers_TypeInfo                                                       = AnyOfTypeInfo([ClassTypeInfo(_featurizers_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_featurizers_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('+'))
_featurizers_name_TypeInfo                                                  = StringTypeInfo(min_length=1)
_featurizers_estimator_name_TypeInfo                                        = StringTypeInfo(min_length=1)
_featurizers_num_output_columns_TypeInfo                                    = FloatTypeInfo(min=1.0)
_featurizers_custom_structs_TypeInfo                                        = AnyOfTypeInfo([ClassTypeInfo(_featurizers_custom_structs_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_featurizers_custom_structs_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_featurizers_custom_structs_name_TypeInfo                                   = StringTypeInfo(min_length=1)
_featurizers_custom_structs_members_TypeInfo                                = AnyOfTypeInfo([ClassTypeInfo(_featurizers_custom_structs_members_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_featurizers_custom_structs_members_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('+'))
_featurizers_custom_structs_members_type_TypeInfo                           = StringTypeInfo(min_length=1)
_featurizers_custom_structs_members_name_TypeInfo                           = StringTypeInfo(min_length=1)
_featurizers_configuration_params_TypeInfo                                  = AnyOfTypeInfo([ClassTypeInfo(_featurizers_configuration_params_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_featurizers_configuration_params_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_featurizers_configuration_params_type_TypeInfo                             = StringTypeInfo(min_length=1)
_featurizers_configuration_params_name_TypeInfo                             = StringTypeInfo(min_length=1)
_featurizers_configuration_params_is_optional_TypeInfo                      = BoolTypeInfo(arity=Arity.FromString('?'))
_featurizers_templates_TypeInfo                                             = AnyOfTypeInfo([ClassTypeInfo(_featurizers_templates_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_featurizers_templates_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_featurizers_templates_name_TypeInfo                                        = StringTypeInfo(min_length=1)
_featurizers_templates_types_TypeInfo                                       = StringTypeInfo(min_length=1, arity=Arity.FromString('+'))
_featurizers_is_intput_a_template_TypeInfo                                  = BoolTypeInfo(arity=Arity.FromString('?'))
_featurizers_is_output_a_template_TypeInfo                                  = BoolTypeInfo(arity=Arity.FromString('?'))
_featurizers_transformed_type_mappings_TypeInfo                             = AnyOfTypeInfo([ClassTypeInfo(_featurizers_transformed_type_mappings_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_featurizers_transformed_type_mappings_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('+'))
_featurizers_transformed_type_mappings_input_type_TypeInfo                  = StringTypeInfo(min_length=1)
_featurizers_transformed_type_mappings_is_input_optional_TypeInfo           = BoolTypeInfo(arity=Arity.FromString('?'))
_featurizers_transformed_type_mappings_transformed_type_TypeInfo            = StringTypeInfo(min_length=1)
_featurizers_transformed_type_mappings_is_output_optional_TypeInfo          = BoolTypeInfo(arity=Arity.FromString('?'))

# ----------------------------------------------------------------------
# |
# |  Deserializer
# |
# ----------------------------------------------------------------------
class Deserializer(object):

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _featurizers_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_name(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_name_Item(item)

        _featurizers_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_estimator_name(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_estimator_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_estimator_name_Item(item)

        _featurizers_estimator_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_num_output_columns(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_num_output_columns_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_num_output_columns_Item(item)

        _featurizers_num_output_columns_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_custom_structs(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _featurizers_custom_structs_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_custom_structs_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_custom_structs_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_custom_structs_name(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_custom_structs_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_custom_structs_name_Item(item)

        _featurizers_custom_structs_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_custom_structs_members(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _featurizers_custom_structs_members_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_custom_structs_members_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_custom_structs_members_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_custom_structs_members_type(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_custom_structs_members_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_custom_structs_members_type_Item(item)

        _featurizers_custom_structs_members_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_custom_structs_members_name(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_custom_structs_members_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_custom_structs_members_name_Item(item)

        _featurizers_custom_structs_members_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_configuration_params(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _featurizers_configuration_params_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_configuration_params_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_configuration_params_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_configuration_params_type(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_configuration_params_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_configuration_params_type_Item(item)

        _featurizers_configuration_params_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_configuration_params_name(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_configuration_params_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_configuration_params_name_Item(item)

        _featurizers_configuration_params_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_configuration_params_is_optional(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_configuration_params_is_optional_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_configuration_params_is_optional_Item(item)

        _featurizers_configuration_params_is_optional_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_templates(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _featurizers_templates_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_templates_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_templates_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_templates_name(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_templates_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_templates_name_Item(item)

        _featurizers_templates_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_templates_types(cls, items):
        if items in [DoesNotExist, None, []]:
            _featurizers_templates_types_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_templates_types_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_templates_types_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_is_intput_a_template(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_is_intput_a_template_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_is_intput_a_template_Item(item)

        _featurizers_is_intput_a_template_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_is_output_a_template(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_is_output_a_template_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_is_output_a_template_Item(item)

        _featurizers_is_output_a_template_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_transformed_type_mappings(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _featurizers_transformed_type_mappings_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._featurizers_transformed_type_mappings_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _featurizers_transformed_type_mappings_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_transformed_type_mappings_input_type(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_transformed_type_mappings_input_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_transformed_type_mappings_input_type_Item(item)

        _featurizers_transformed_type_mappings_input_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_transformed_type_mappings_is_input_optional(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_transformed_type_mappings_is_input_optional_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_transformed_type_mappings_is_input_optional_Item(item)

        _featurizers_transformed_type_mappings_is_input_optional_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_transformed_type_mappings_transformed_type(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_transformed_type_mappings_transformed_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_transformed_type_mappings_transformed_type_Item(item)

        _featurizers_transformed_type_mappings_transformed_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def featurizers_transformed_type_mappings_is_output_optional(cls, item):
        if item in [DoesNotExist, None]:
            _featurizers_transformed_type_mappings_is_output_optional_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._featurizers_transformed_type_mappings_is_output_optional_Item(item)

        _featurizers_transformed_type_mappings_is_output_optional_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # name
        try:
            attributes["name"] = cls.featurizers_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("name")

        # estimator_name
        try:
            attributes["estimator_name"] = cls.featurizers_estimator_name(
                cls._GetPythonAttribute(
                    item,
                    "estimator_name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("estimator_name")

        # num_output_columns
        try:
            attributes["num_output_columns"] = cls.featurizers_num_output_columns(
                cls._GetPythonAttribute(
                    item,
                    "num_output_columns",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("num_output_columns")

        # is_intput_a_template
        try:
            cls._ApplyOptionalAttribute(item, "is_intput_a_template", attributes, cls.featurizers_is_intput_a_template, always_include_optional, default_value_func=lambda: StringSerialization.DeserializeItem(_featurizers_is_intput_a_template_TypeInfo, "true"))
        except:
            _DecorateActiveException("is_intput_a_template")

        # is_output_a_template
        try:
            cls._ApplyOptionalAttribute(item, "is_output_a_template", attributes, cls.featurizers_is_output_a_template, always_include_optional, default_value_func=lambda: StringSerialization.DeserializeItem(_featurizers_is_output_a_template_TypeInfo, "false"))
        except:
            _DecorateActiveException("is_output_a_template")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # custom_structs
        try:
            cls._ApplyOptionalChildren(item, "custom_structs", result, lambda value: cls.featurizers_custom_structs(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("custom_structs")

        # configuration_params
        try:
            cls._ApplyOptionalChildren(item, "configuration_params", result, lambda value: cls.featurizers_configuration_params(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("configuration_params")

        # templates
        try:
            cls._ApplyOptionalChildren(item, "templates", result, lambda value: cls.featurizers_templates(value, always_include_optional, process_additional_data), always_include_optional)
        except:
            _DecorateActiveException("templates")

        # transformed_type_mappings
        try:
            setattr(result, "transformed_type_mappings", cls.featurizers_transformed_type_mappings(
                cls._GetPythonAttribute(
                    item,
                    "transformed_type_mappings",
                    is_optional=False,
                ),
                always_include_optional,
                process_additional_data

            )
            )
        except:
            _DecorateActiveException("transformed_type_mappings")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"name", "estimator_name", "num_output_columns", "custom_structs", "configuration_params", "templates", "is_intput_a_template", "is_output_a_template", "transformed_type_mappings"},
            )

        _featurizers_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_estimator_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_estimator_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_num_output_columns_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_num_output_columns_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_custom_structs_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # name
        try:
            attributes["name"] = cls.featurizers_custom_structs_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("name")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # members
        try:
            setattr(result, "members", cls.featurizers_custom_structs_members(
                cls._GetPythonAttribute(
                    item,
                    "members",
                    is_optional=False,
                ),
                always_include_optional,
                process_additional_data

            )
            )
        except:
            _DecorateActiveException("members")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"name", "members"},
            )

        _featurizers_custom_structs_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_custom_structs_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_custom_structs_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_custom_structs_members_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # type
        try:
            setattr(result, "type", cls.featurizers_custom_structs_members_type(
                cls._GetPythonAttribute(
                    item,
                    "type",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("type")

        # name
        try:
            setattr(result, "name", cls.featurizers_custom_structs_members_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("name")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"type", "name"},
            )

        _featurizers_custom_structs_members_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_custom_structs_members_type_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_custom_structs_members_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_custom_structs_members_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_custom_structs_members_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_configuration_params_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # type
        try:
            setattr(result, "type", cls.featurizers_configuration_params_type(
                cls._GetPythonAttribute(
                    item,
                    "type",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("type")

        # name
        try:
            setattr(result, "name", cls.featurizers_configuration_params_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("name")

        # is_optional
        try:
            cls._ApplyOptionalChild(item, "is_optional", result, cls.featurizers_configuration_params_is_optional, always_include_optional, default_value_func=lambda: StringSerialization.DeserializeItem(_featurizers_configuration_params_is_optional_TypeInfo, "false"))
        except:
            _DecorateActiveException("is_optional")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"type", "name", "is_optional"},
            )

        _featurizers_configuration_params_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_configuration_params_type_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_configuration_params_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_configuration_params_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_configuration_params_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_configuration_params_is_optional_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_configuration_params_is_optional_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_templates_Item(cls, item, always_include_optional, process_additional_data):
        attributes = OrderedDict()

        # name
        try:
            attributes["name"] = cls.featurizers_templates_name(
                cls._GetPythonAttribute(
                    item,
                    "name",
                    is_optional=False,
                ),
            )
        except:
            _DecorateActiveException("name")

        result = _CreatePythonObject(
            attributes=attributes,
        )

        # types
        try:
            setattr(result, "types", cls.featurizers_templates_types(
                cls._GetPythonAttribute(
                    item,
                    "types",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("types")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"name", "types"},
            )

        _featurizers_templates_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_templates_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_templates_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_templates_types_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_templates_types_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_is_intput_a_template_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_is_intput_a_template_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_is_output_a_template_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_is_output_a_template_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_transformed_type_mappings_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # input_type
        try:
            setattr(result, "input_type", cls.featurizers_transformed_type_mappings_input_type(
                cls._GetPythonAttribute(
                    item,
                    "input_type",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("input_type")

        # is_input_optional
        try:
            cls._ApplyOptionalChild(item, "is_input_optional", result, cls.featurizers_transformed_type_mappings_is_input_optional, always_include_optional, default_value_func=lambda: StringSerialization.DeserializeItem(_featurizers_transformed_type_mappings_is_input_optional_TypeInfo, "false"))
        except:
            _DecorateActiveException("is_input_optional")

        # transformed_type
        try:
            setattr(result, "transformed_type", cls.featurizers_transformed_type_mappings_transformed_type(
                cls._GetPythonAttribute(
                    item,
                    "transformed_type",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("transformed_type")

        # is_output_optional
        try:
            cls._ApplyOptionalChild(item, "is_output_optional", result, cls.featurizers_transformed_type_mappings_is_output_optional, always_include_optional, default_value_func=lambda: StringSerialization.DeserializeItem(_featurizers_transformed_type_mappings_is_output_optional_TypeInfo, "false"))
        except:
            _DecorateActiveException("is_output_optional")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"input_type", "is_input_optional", "transformed_type", "is_output_optional"},
            )

        _featurizers_transformed_type_mappings_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_transformed_type_mappings_input_type_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_transformed_type_mappings_input_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_transformed_type_mappings_is_input_optional_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_transformed_type_mappings_is_input_optional_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_transformed_type_mappings_transformed_type_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_transformed_type_mappings_transformed_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _featurizers_transformed_type_mappings_is_output_optional_Item(cls, item):
        return JsonSerialization.DeserializeItem(_featurizers_transformed_type_mappings_is_output_optional_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChild(cls, item, attribute_name, dest, apply_func, always_include_optional, default_value_func=None):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if default_value_func:
            setattr(dest, attribute_name, default_value_func())
            return

        if always_include_optional:
            setattr(dest, attribute_name, None)

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChildren(cls, items, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            items,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        # No default statement

        if always_include_optional:
            setattr(dest, attribute_name, [])

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalAttribute(cls, item, attribute_name, dest, apply_func, always_include_optional, default_value_func=None):
        value = cls._GetPythonAttribute(
            item,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                dest[attribute_name] = value
                return

        if default_value_func:
            dest[attribute_name] = default_value_func()
            return

        if always_include_optional:
            dest[attribute_name] = None

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyAdditionalData(
        cls,
        source,
        dest,
        exclude_names,
    ):
        for name, child in [(k, v) for k, v in six.iteritems(source if isinstance(source, dict) else source.__dict__) if not k.startswith("_") and k not in exclude_names]:
            try:
                if isinstance(child, list):
                    children = []

                    for index, item in enumerate(child):
                        item_name = "Index {}".format(index)

                        try:
                            children.append(cls._CreateAdditionalDataItem(item_name, item))
                        except:
                            _DecorateActiveException(item_name)

                    setattr(dest, name, children)
                else:
                    setattr(dest, name, cls._CreateAdditionalDataItem(name, child))
            except:
                _DecorateActiveException(name)

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateAdditionalDataItem(cls, name, source):
        # The following types should be returned directly without additional conversion
        if isinstance(source, (int, float, str, bool)):
            return source

        assert not isinstance(source, list), source

        if not isinstance(source, dict):
            source = source.__dict__

        source_attribute_names = source.get("_attribute_names", set())

        attributes = OrderedDict()
        items = OrderedDict()

        for k, v in six.iteritems(source):
            if k.startswith("_"):
                continue

            if k in source_attribute_names:
                attributes[k] = v
            else:
                items[k] = v

        if len(items) == 1 and next(six.iterkeys(items)) == source.get("_text_attribute_name", None):
            return _CreatePythonObject(
                attributes=attributes,
                **{"simple_value": source[source["_text_attribute_name"]], "_text_attribute_name": "simple_value"},
            )

        result = _CreatePythonObject(
            attributes=attributes,
        )

        for k, v in six.iteritems(items):
            try:
                if isinstance(v, list):
                    new_items = []

                    for index, child in enumerate(v):
                        try:
                            new_items.append(cls._CreateAdditionalDataItem("item", child))
                        except:
                            _DecorateActiveException("Index {}".format(index))

                    setattr(result, k, new_items)
                else:
                    new_item = cls._CreateAdditionalDataItem(k, v)

                    setattr(result, k, new_item)
            except:
                _DecorateActiveException(k)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetPythonAttribute(
        item,
        attribute_name,
        is_optional=False,
    ):
        if not isinstance(item, dict):
            item = item.__dict__

        value = item.get(attribute_name, DoesNotExist)
        if value is DoesNotExist and not is_optional:
            raise SerializeException("No items were found")

        return value


# ----------------------------------------------------------------------
class Object(object):
    def __init__(self):
        self._attribute_names = set()

    def __repr__(self):
        return CommonEnvironment.ObjectReprImpl(self)


# ----------------------------------------------------------------------
def _CreatePythonObject(
    attributes=None,
    **kwargs
):
    attributes = attributes or {}

    result = Object()

    for d in [attributes, kwargs]:
        for k, v in six.iteritems(d):
            setattr(result, k, v)

    for k in six.iterkeys(attributes):
        result._attribute_names.add(k)

    return result


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
def _DecorateActiveException(frame_desc):
    exception = sys.exc_info()[1]

    if not hasattr(exception, "stack"):
        setattr(exception, "stack", [])

    exception.stack.insert(0, frame_desc)

    # <The raise statement is not inside an except clause> pylint: disable = E0704
    raise
