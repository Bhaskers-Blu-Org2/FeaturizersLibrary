# --------------------------------------------------------------------------------
# |
# |  WARNING:
# |  This file was generated; any local changes will be overwritten during
# |  future invocations of the generator!
# |
# |  Generated by: <SimpleSchemaGenerator>/Plugins/Impl/PythonSerializationImpl.py
# |  Generated on: 2019-06-05 09:55:01.478584
# |
# --------------------------------------------------------------------------------
import copy
import sys

from collections import OrderedDict

import six

import CommonEnvironment
from CommonEnvironment.TypeInfo import Arity
from CommonEnvironment.TypeInfo.AnyOfTypeInfo import AnyOfTypeInfo
from CommonEnvironment.TypeInfo.ClassTypeInfo import ClassTypeInfo
from CommonEnvironment.TypeInfo.DictTypeInfo import DictTypeInfo
from CommonEnvironment.TypeInfo.GenericTypeInfo import GenericTypeInfo
from CommonEnvironment.TypeInfo.ListTypeInfo import ListTypeInfo

from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.PythonCodeVisitor import PythonCodeVisitor

# <Unused import> pylint: disable = W0611
# <Unused import> pylint: disable = W0614
from CommonEnvironment.TypeInfo.FundamentalTypes.All import *               # <Wildcard import> pylint: disable = W0401

# <Standard import should be placed before...> pylint: disable = C0411

# ----------------------------------------------------------------------
import json

from CommonEnvironment import FileSystem
from CommonEnvironment.TypeInfo.FundamentalTypes.Serialization.JsonSerialization import JsonSerialization

# ----------------------------------------------------------------------
class JsonEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, Object):
            d = copy.deepcopy(o.__dict__)

            for k in list(six.iterkeys(d)):
                if k.startswith("_"):
                    del d[k]

            return d

        return getattr(o, "__dict__", o)


# ----------------------------------------------------------------------
# <Method name "..." doesn't conform to PascalCase naming style> pylint: disable = C0103
# <Line too long> pylint: disable = C0301
# <Too many lines in module> pylint: disable = C0302
# <Wrong hanging indentation> pylint: disable = C0330

# <Too few public methods> pylint: disable = R0903
# <Too many public methods> pylint: disable = R0904
# <Too many branches> pylint: disable = R0912
# <Too many statements> pylint: disable = R0915


# ----------------------------------------------------------------------
class SerializationException(Exception):
    def __init__(self, ex_or_string):
        if isinstance(ex_or_string, six.string_types):
            super(SerializationException, self).__init__(ex_or_string)
        else:
            super(SerializationException, self).__init__(str(ex_or_string))

            self.__dict__ = copy.deepcopy(ex_or_string.__dict__)


class UniqueKeySerializationException(SerializationException):              pass
class SerializeException(SerializationException):                           pass
class DeserializeException(SerializationException):                         pass


class DoesNotExist(object):                                                 pass


# ----------------------------------------------------------------------
# |
# |  Utility Methods
# |
# ----------------------------------------------------------------------
def Deserialize(
    root,
    process_additional_data=False,
    always_include_optional=False,
):
    return Deserialize_Functions(
        root,
        is_root=False,
        process_additional_data=process_additional_data,
        always_include_optional=always_include_optional,
    )


# ----------------------------------------------------------------------
def Deserialize_Functions(
    items,
    process_additional_data=False,
    always_include_optional=False,
    is_root=False,
):
    """Deserializes 'Functions' from a JSON object to a python object"""

    if isinstance(items, six.string_types):
        if FileSystem.IsFilename(items):
            with open(items) as f:
                items = json.load(f)
        else:
            items = json.loads(items)

    if not isinstance(items, list):
        if isinstance(items, dict) and "Functions" in items:
            items = items["Functions"]
        elif not isinstance(items, dict) and hasattr(items, "Functions"):
            items = getattr(items, "Functions")
        elif is_root:
            items = DoesNotExist

    try:
        try:
            items = Deserializer().Functions(
                items,
                process_additional_data=process_additional_data,
                always_include_optional=always_include_optional,
            )

            if items is DoesNotExist:
                items = []
        except:
            _DecorateActiveException("Functions")
    except SerializationException:
        raise
    except Exception as ex:
        raise DeserializeException(ex)

    return items


# ----------------------------------------------------------------------
# |
# |  Type Infos
# |
# ----------------------------------------------------------------------
Functions_TypeInfo                                                          = ClassTypeInfo(OrderedDict([ ( "func_name", StringTypeInfo(min_length=1) ), ( "raw_return_type", StringTypeInfo(min_length=1) ), ( "simple_return_type", StringTypeInfo(min_length=1) ), ( "var_names", StringTypeInfo(min_length=1, arity=Arity.FromString('*')) ), ( "raw_var_types", StringTypeInfo(min_length=1, arity=Arity.FromString('*')) ), ( "simple_var_types", StringTypeInfo(min_length=1, arity=Arity.FromString('*')) ) ]), require_exact_match=True, arity=Arity.FromString('*'))

_Functions_TypeInfo_Contents                                                = OrderedDict([("func_name", GenericTypeInfo()), ("raw_return_type", GenericTypeInfo()), ("simple_return_type", GenericTypeInfo()), ("var_names", GenericTypeInfo(arity=Arity.FromString('*'))), ("raw_var_types", GenericTypeInfo(arity=Arity.FromString('*'))), ("simple_var_types", GenericTypeInfo(arity=Arity.FromString('*')))])

_Functions_TypeInfo                                                         = AnyOfTypeInfo([ClassTypeInfo(_Functions_TypeInfo_Contents, require_exact_match=False), DictTypeInfo(_Functions_TypeInfo_Contents, require_exact_match=False)], arity=Arity.FromString('*'))
_Functions_func_name_TypeInfo                                               = StringTypeInfo(min_length=1)
_Functions_raw_return_type_TypeInfo                                         = StringTypeInfo(min_length=1)
_Functions_simple_return_type_TypeInfo                                      = StringTypeInfo(min_length=1)
_Functions_var_names_TypeInfo                                               = StringTypeInfo(min_length=1, arity=Arity.FromString('*'))
_Functions_raw_var_types_TypeInfo                                           = StringTypeInfo(min_length=1, arity=Arity.FromString('*'))
_Functions_simple_var_types_TypeInfo                                        = StringTypeInfo(min_length=1, arity=Arity.FromString('*'))

# ----------------------------------------------------------------------
# |
# |  Deserializer
# |
# ----------------------------------------------------------------------
class Deserializer(object):

    # ----------------------------------------------------------------------
    @classmethod
    def Functions(cls, items, always_include_optional, process_additional_data):
        if items in [DoesNotExist, None, []]:
            _Functions_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Functions_Item(this_item, always_include_optional, process_additional_data))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Functions_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Functions_func_name(cls, item):
        if item in [DoesNotExist, None]:
            _Functions_func_name_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Functions_func_name_Item(item)

        _Functions_func_name_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Functions_raw_return_type(cls, item):
        if item in [DoesNotExist, None]:
            _Functions_raw_return_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Functions_raw_return_type_Item(item)

        _Functions_raw_return_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Functions_simple_return_type(cls, item):
        if item in [DoesNotExist, None]:
            _Functions_simple_return_type_TypeInfo.ValidateArity(None)
            return DoesNotExist

        result = cls._Functions_simple_return_type_Item(item)

        _Functions_simple_return_type_TypeInfo.ValidateArity(result)

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def Functions_var_names(cls, items):
        if items in [DoesNotExist, None, []]:
            _Functions_var_names_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Functions_var_names_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Functions_var_names_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Functions_raw_var_types(cls, items):
        if items in [DoesNotExist, None, []]:
            _Functions_raw_var_types_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Functions_raw_var_types_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Functions_raw_var_types_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    @classmethod
    def Functions_simple_var_types(cls, items):
        if items in [DoesNotExist, None, []]:
            _Functions_simple_var_types_TypeInfo.ValidateArity(None)
            return DoesNotExist

        results = []

        for this_index, this_item in enumerate(items or []):
            try:
                results.append(cls._Functions_simple_var_types_Item(this_item))
            except:
                _DecorateActiveException("Index {}".format(this_index))

        _Functions_simple_var_types_TypeInfo.ValidateArity(results)

        return results

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_Item(cls, item, always_include_optional, process_additional_data):
        result = _CreatePythonObject(
            attributes=None,
        )

        # func_name
        try:
            setattr(result, "func_name", cls.Functions_func_name(
                cls._GetPythonAttribute(
                    item,
                    "func_name",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("func_name")

        # raw_return_type
        try:
            setattr(result, "raw_return_type", cls.Functions_raw_return_type(
                cls._GetPythonAttribute(
                    item,
                    "raw_return_type",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("raw_return_type")

        # simple_return_type
        try:
            setattr(result, "simple_return_type", cls.Functions_simple_return_type(
                cls._GetPythonAttribute(
                    item,
                    "simple_return_type",
                    is_optional=False,
                ),
            )
            )
        except:
            _DecorateActiveException("simple_return_type")

        # var_names
        try:
            cls._ApplyOptionalChildren(item, "var_names", result, cls.Functions_var_names, always_include_optional)
        except:
            _DecorateActiveException("var_names")

        # raw_var_types
        try:
            cls._ApplyOptionalChildren(item, "raw_var_types", result, cls.Functions_raw_var_types, always_include_optional)
        except:
            _DecorateActiveException("raw_var_types")

        # simple_var_types
        try:
            cls._ApplyOptionalChildren(item, "simple_var_types", result, cls.Functions_simple_var_types, always_include_optional)
        except:
            _DecorateActiveException("simple_var_types")

        # Additional data
        if process_additional_data:
            cls._ApplyAdditionalData(
                item,
                result,
                exclude_names={"func_name", "raw_return_type", "simple_return_type", "var_names", "raw_var_types", "simple_var_types"},
            )

        _Functions_TypeInfo.ValidateItem(
            result,
            recurse=False,
            require_exact_match=not process_additional_data,
        )

        return result

    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_func_name_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Functions_func_name_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_raw_return_type_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Functions_raw_return_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_simple_return_type_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Functions_simple_return_type_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_var_names_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Functions_var_names_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_raw_var_types_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Functions_raw_var_types_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    @classmethod
    def _Functions_simple_var_types_Item(cls, item):
        return JsonSerialization.DeserializeItem(_Functions_simple_var_types_TypeInfo, item, **{})

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyOptionalChildren(cls, items, attribute_name, dest, apply_func, always_include_optional):
        value = cls._GetPythonAttribute(
            items,
            attribute_name,
            is_optional=True,
        )

        if value is not DoesNotExist:
            value = apply_func(value)
            if value is not DoesNotExist:
                setattr(dest, attribute_name, value)
                return

        if always_include_optional:
            setattr(dest, attribute_name, [])

    # ----------------------------------------------------------------------
    @classmethod
    def _ApplyAdditionalData(
        cls,
        source,
        dest,
        exclude_names,
    ):
        for name, child in [(k, v) for k, v in six.iteritems(source if isinstance(source, dict) else source.__dict__) if not k.startswith("_") and k not in exclude_names]:
            try:
                if isinstance(child, list):
                    children = []

                    for index, item in enumerate(child):
                        item_name = "Index {}".format(index)

                        try:
                            children.append(cls._CreateAdditionalDataItem(item_name, item))
                        except:
                            _DecorateActiveException(item_name)

                    setattr(dest, name, children)
                else:
                    setattr(dest, name, cls._CreateAdditionalDataItem(name, child))
            except:
                _DecorateActiveException(name)

    # ----------------------------------------------------------------------
    @classmethod
    def _CreateAdditionalDataItem(cls, name, source):
        # The following types should be returned directly without additional conversion
        if isinstance(source, (int, float, str, bool)):
            return source

        assert not isinstance(source, list), source

        if not isinstance(source, dict):
            source = source.__dict__

        source_attribute_names = source.get("_attribute_names", set())

        attributes = OrderedDict()
        items = OrderedDict()

        for k, v in six.iteritems(source):
            if k.startswith("_"):
                continue

            if k in source_attribute_names:
                attributes[k] = v
            else:
                items[k] = v

        if len(items) == 1 and next(six.iterkeys(items)) == source.get("_text_attribute_name", None):
            return _CreatePythonObject(
                attributes=attributes,
                **{"simple_value": source[source["_text_attribute_name"]], "_text_attribute_name": "simple_value"},
            )

        result = _CreatePythonObject(
            attributes=attributes,
        )

        for k, v in six.iteritems(items):
            try:
                if isinstance(v, list):
                    new_items = []

                    for index, child in enumerate(v):
                        try:
                            new_items.append(cls._CreateAdditionalDataItem("item", child))
                        except:
                            _DecorateActiveException("Index {}".format(index))

                    setattr(result, k, new_items)
                else:
                    new_item = cls._CreateAdditionalDataItem(k, v)

                    setattr(result, k, new_item)
            except:
                _DecorateActiveException(k)

        return result

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetPythonAttribute(
        item,
        attribute_name,
        is_optional=False,
    ):
        if not isinstance(item, dict):
            item = item.__dict__

        value = item.get(attribute_name, DoesNotExist)
        if value is DoesNotExist and not is_optional:
            raise SerializeException("No items were found")

        return value


# ----------------------------------------------------------------------
class Object(object):
    def __init__(self):
        self._attribute_names = set()

    def __repr__(self):
        return CommonEnvironment.ObjectReprImpl(self)


# ----------------------------------------------------------------------
def _CreatePythonObject(
    attributes=None,
    **kwargs
):
    attributes = attributes or {}

    result = Object()

    for d in [attributes, kwargs]:
        for k, v in six.iteritems(d):
            setattr(result, k, v)

    for k in six.iterkeys(attributes):
        result._attribute_names.add(k)

    return result


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
def _DecorateActiveException(frame_desc):
    exception = sys.exc_info()[1]

    if not hasattr(exception, "stack"):
        setattr(exception, "stack", [])

    exception.stack.insert(0, frame_desc)

    # <The raise statement is not inside an except clause> pylint: disable = E0704
    raise
